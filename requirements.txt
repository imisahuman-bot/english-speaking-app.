streamlit==1.39.0
import streamlit as st
import openai
import requests
import base64
import tempfile
from gtts import gTTS

st.title("ðŸŽ¤ English Speaking Practice")

# Component HTML ghi Ã¢m báº±ng trÃ¬nh duyá»‡t
st.markdown("""
<script>
let mediaRecorder;
let audioChunks = [];
async function startRecording() {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();
    audioChunks = [];
    mediaRecorder.addEventListener("dataavailable", event => {
        audioChunks.push(event.data);
    });
    document.getElementById("status").innerText = "Recording...";
}
async function stopRecording() {
    mediaRecorder.stop();
    mediaRecorder.addEventListener("stop", () => {
        const audioBlob = new Blob(audioChunks);
        const reader = new FileReader();
        reader.readAsDataURL(audioBlob);
        reader.onloadend = () => {
            const base64Audio = reader.result.split(',')[1];
            window.parent.postMessage({ type: "audio_data", data: base64Audio }, "*");
        };
    });
    document.getElementById("status").innerText = "Stopped.";
}
</script>
<button onclick="startRecording()">Start Recording</button>
<button onclick="stopRecording()">Stop</button>
<p id="status"></p>
""", unsafe_allow_html=True)

audio_data = st.experimental_get_query_params().get("audio_data")

if "audio_data" in st.session_state:
    audio_data = st.session_state["audio_data"]

if audio_data:
    audio_bytes = base64.b64decode(audio_data)
    st.audio(audio_bytes, format="audio/wav")
    st.success("âœ… Recorded successfully!")
else:
    st.info("Click **Start Recording** to record your voice.")

gtts
openai
requests
